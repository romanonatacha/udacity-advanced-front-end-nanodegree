{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/polyfills/url.js"],"names":[],"mappings":"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","file":"url.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n\n(function(scope) {\n  'use strict';\n\n  // feature detect for URL constructor\n  var hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      var u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch(e) {}\n  }\n\n  if (hasWorkingUrl)\n    return;\n\n  var relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n\n  var relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if ('' == h) {\n      invalid.call(this)\n    }\n    // XXX\n    return h.toLowerCase()\n  }\n\n  function percentEscape(c) {\n    var unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) == -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // XXX This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    var unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) == -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  var EOF = undefined,\n      ALPHA = /[a-zA-Z]/,\n      ALPHANUMERIC = /[a-zA-Z0-9\\+\\-\\.]/;\n\n  function parse(input, stateOverride, base) {\n    function err(message) {\n      errors.push(message)\n    }\n\n    var state = stateOverride || 'scheme start',\n        cursor = 0,\n        buffer = '',\n        seenAt = false,\n        seenBracket = false,\n        errors = [];\n\n    loop: while ((input[cursor - 1] != EOF || cursor == 0) && !this._isInvalid) {\n      var c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (':' == c) {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if ('file' == this._scheme) {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme == this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF == c) {\n            break loop;\n          } else {\n            err('Code point not allowed in scheme: ' + c)\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if ('?' == c) {\n            query = '?';\n            state = 'query';\n          } else if ('#' == c) {\n            this._fragment = '#';\n            state = 'fragment';\n          } else {\n            // XXX error handling\n            if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n              this._schemeData += percentEscape(c);\n            }\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if ('/' == c && '/' == input[cursor+1]) {\n            state = 'authority ignore slashes';\n          } else {\n            err('Expected /, got: ' + c);\n            state = 'relative';\n            continue\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if ('file' != this._scheme)\n            this._scheme = base._scheme;\n          if (EOF == c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if ('/' == c || '\\\\' == c) {\n            if ('\\\\' == c)\n              err('\\\\ is an invalid code point.');\n            state = 'relative slash';\n          } else if ('?' == c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if ('#' == c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            var nextC = input[cursor+1]\n            var nextNextC = input[cursor+2]\n            if (\n              'file' != this._scheme || !ALPHA.test(c) ||\n              (nextC != ':' && nextC != '|') ||\n              (EOF != nextNextC && '/' != nextNextC && '\\\\' != nextNextC && '?' != nextNextC && '#' != nextNextC)) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if ('/' == c || '\\\\' == c) {\n            if ('\\\\' == c) {\n              err('\\\\ is an invalid code point.');\n            }\n            if ('file' == this._scheme) {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if ('file' != this._scheme) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if ('/' == c) {\n            state = 'authority second slash';\n          } else {\n            err(\"Expected '/', got: \" + c);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if ('/' != c) {\n            err(\"Expected '/', got: \" + c);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if ('/' != c && '\\\\' != c) {\n            state = 'authority';\n            continue;\n          } else {\n            err('Expected authority, got: ' + c);\n          }\n          break;\n\n        case 'authority':\n          if ('@' == c) {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (var i = 0; i < buffer.length; i++) {\n              var cp = buffer[i];\n              if ('\\t' == cp || '\\n' == cp || '\\r' == cp) {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // XXX check URL code points\n              if (':' == cp && null === this._password) {\n                this._password = '';\n                continue;\n              }\n              var tempC = percentEscape(cp);\n              (null !== this._password) ? this._password += tempC : this._username += tempC;\n            }\n            buffer = '';\n          } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n            if (buffer.length == 2 && ALPHA.test(buffer[0]) && (buffer[1] == ':' || buffer[1] == '|')) {\n              state = 'relative path';\n            } else if (buffer.length == 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if ('\\t' == c || '\\n' == c || '\\r' == c) {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (':' == c && !seenBracket) {\n            // XXX host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if ('hostname' == stateOverride) {\n              break loop;\n            }\n          } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c) {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if ('\\t' != c && '\\n' != c && '\\r' != c) {\n            if ('[' == c) {\n              seenBracket = true;\n            } else if (']' == c) {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err('Invalid code point in host/hostname: ' + c);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF == c || '/' == c || '\\\\' == c || '?' == c || '#' == c || stateOverride) {\n            if ('' != buffer) {\n              var temp = parseInt(buffer, 10);\n              if (temp != relative[this._scheme]) {\n                this._port = temp + '';\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if ('\\t' == c || '\\n' == c || '\\r' == c) {\n            err('Invalid code point in port: ' + c);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if ('\\\\' == c)\n            err(\"'\\\\' not allowed in path.\");\n          state = 'relative path';\n          if ('/' != c && '\\\\' != c) {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF == c || '/' == c || '\\\\' == c || (!stateOverride && ('?' == c || '#' == c))) {\n            if ('\\\\' == c) {\n              err('\\\\ not allowed in relative path.');\n            }\n            var tmp;\n            if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {\n              buffer = tmp;\n            }\n            if ('..' == buffer) {\n              this._path.pop();\n              if ('/' != c && '\\\\' != c) {\n                this._path.push('');\n              }\n            } else if ('.' == buffer && '/' != c && '\\\\' != c) {\n              this._path.push('');\n            } else if ('.' != buffer) {\n              if ('file' == this._scheme && this._path.length == 0 && buffer.length == 2 && ALPHA.test(buffer[0]) && buffer[1] == '|') {\n                buffer = buffer[0] + ':';\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if ('?' == c) {\n              this._query = '?';\n              state = 'query';\n            } else if ('#' == c) {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if ('\\t' != c && '\\n' != c && '\\r' != c) {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && '#' == c) {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF != c && '\\t' != c && '\\n' != c && '\\r' != c) {\n            this._fragment += c;\n          }\n          break;\n      }\n\n      cursor++;\n    }\n  }\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  function jURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof jURL))\n      base = new jURL(String(base));\n\n    this._url = url;\n    clear.call(this);\n\n    var input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  jURL.prototype = {\n    toString: function() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid)\n        return this._url;\n\n      var authority = '';\n      if ('' != this._username || null != this._password) {\n        authority = this._username +\n            (null != this._password ? ':' + this._password : '') + '@';\n      }\n\n      return this.protocol +\n          (this._isRelative ? '//' + authority + this.host : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return this._scheme + ':';\n    },\n    set protocol(protocol) {\n      if (this._isInvalid)\n        return;\n      parse.call(this, protocol + ':', 'scheme start');\n    },\n\n    get host() {\n      return this._isInvalid ? '' : this._port ?\n          this._host + ':' + this._port : this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative)\n        return;\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative)\n        return;\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative)\n        return;\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      return this._isInvalid ? '' : this._isRelative ?\n          '/' + this._path.join('/') : this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative)\n        return;\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || '?' == this._query ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative)\n        return;\n      this._query = '?';\n      if ('?' == search[0])\n        search = search.slice(1);\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || '#' == this._fragment ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid)\n        return;\n      this._fragment = '#';\n      if ('#' == hash[0])\n        hash = hash.slice(1);\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      var host;\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n      }\n      host = this.host;\n      if (!host) {\n        return '';\n      }\n      return this._scheme + '://' + host;\n    }\n  };\n\n  // Copy over the static methods\n  var OriginalURL = scope.URL;\n  if (OriginalURL) {\n    jURL.createObjectURL = function(blob) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL.apply(OriginalURL, arguments);\n    };\n    jURL.revokeObjectURL = function(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = jURL;\n\n})(self);"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}